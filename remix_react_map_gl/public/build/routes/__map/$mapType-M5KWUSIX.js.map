{
  "version": 3,
  "sources": ["browser-route-module:C:\\Users\\Ruben\\OneDrive\\Bureaublad\\OrbitStage2022\\OrbitStage\\remix_react_map_gl\\app\\routes\\__map\\$mapType.tsx?browser", "../../../../app/routes/__map/$mapType.tsx"],
  "sourcesContent": ["export { default, links } from \"C:\\\\Users\\\\Ruben\\\\OneDrive\\\\Bureaublad\\\\OrbitStage2022\\\\OrbitStage\\\\remix_react_map_gl\\\\app\\\\routes\\\\__map\\\\$mapType.tsx\";", "import { json, LoaderFunction, useLoaderData } from \"remix\";\nimport Map, { Source, Layer, MapRef } from \"react-map-gl\";\nimport styles from \"~/styles/mapType.css\";\nimport geoJson from \"~/data/result.json\";\nimport { formatNumber } from \"~/utils/math\";\n\nexport function links() {\n  return [\n    { rel: \"stylesheet\", href: styles },\n    {\n      rel: \"stylesheet\",\n      href: \"https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css\",\n    },\n  ];\n}\nimport type { FillLayer } from \"react-map-gl\";\nimport { useMemo, useRef } from \"react\";\n\ninterface CsvRow {\n  jaar?: number;\n  mediaan1: number;\n  naam: string;\n}\n\nconst rangeColors = [0, '#feb24c', 100000, '#fd8d3c', 200000, '#fc4e2a', 300000, '#e31a1c', 500000, '#b10026'];\n\nconst getMergedGeojson = (\n  geoJson: GeoJSON.FeatureCollection<GeoJSON.Geometry>,\n  csv: CsvRow[],\n  key: string\n): GeoJSON.FeatureCollection<GeoJSON.Geometry> => {\n  return {\n    ...geoJson,\n    features: geoJson.features.map((feature) => {\n      const row: CsvRow | undefined = csv.find(\n        (element) => element?.naam === feature.properties?.NAAM.toUpperCase()\n      );\n      return {\n        ...feature,\n        properties: {\n          ...feature.properties,\n          // mediaanFormatted: formatNumber(row?.mediaan1),\n          mediaan1: row?.mediaan1 ?? \"noMediaan\",\n        },\n      };\n    }),\n  };\n};\n\n//   const updateLayerByYear = (jaartal: number | string) => {\n//     const csvFilteredRows = csv.filter(\n//       (item) => item.jaar === Number(jaartal)\n//     );\n//     const geoJson = getMergedGeojson(dataLayer.geoJson, csvFilteredRows, dataLayer.key);\n//     console.log(geoJson);\n//   };\n\nexport const dataLayer: FillLayer = {\n  id: \"data\",\n  type: \"fill\",\n  filter: [\"!=\", \"mediaan1\", \"noMediaan\"],\n  paint: {\n    \"fill-color\": [\n      \"interpolate\",\n      [\"linear\"],\n      [\"get\", \"mediaan1\"],\n      [0, '#feb24c', 100000, '#fd8d3c', 200000, '#fc4e2a', 300000, '#e31a1c', 500000, '#b10026'],\n    ],\n    \"fill-opacity\": 1,\n  },\n};\n\ntype LoaderData = Awaited<ReturnType<typeof loader>>;\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const response = await fetch(\n    \"https://raw.githubusercontent.com/uber/react-map-gl/master/examples/.data/us-income.geojson\"\n  );\n\n  let geojson = getMergedGeojson(\n    geoJson[2].geoJson,\n    geoJson[2].csv,\n    \"provincie\"\n  );\n  // if(params.mapType === 'provinces'){\n  //     geojson = geoJson[2].geoJson;\n  // }\n  // else if(params.mapType === 'districts'){\n  //     geojson = geoJson[1].geoJson;\n  // }\n  // else{\n  //     geojson = geoJson[0].geoJson;\n  // }\n\n  return json({ zoom: params.mapType, geojson });\n};\n\nexport default function Test() {\n  const { geojson, zoom } = useLoaderData<LoaderData>();\n  const mapRef = useRef<MapRef | null>(null);\n  return (\n    <>\n    {console.log(geojson)}\n      {/* <h2>Hier komt de map {zoom} </h2>\n\n      <Map\n        ref={mapRef}\n        id=\"map\"\n        initialViewState={{\n          latitude: 50.616949,\n          longitude: 4.88526,\n          zoom: 6,\n        }}\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        mapboxAccessToken={\n          \"pk.eyJ1IjoiYmFyYmFyb3NzbyIsImEiOiJja3VsbWRiancwNXVqMzFwMTZlbXh3Y3Q1In0.4BKvUDl3t6OSJbdMmu7tkg\"\n        }\n        interactiveLayerIds={[\"data\"]}\n      >\n        <Source type=\"geojson\" data={geojson}>\n          <Layer {...dataLayer} />\n        </Source>\n      </Map> */}\n    </>\n  );\n}\n"],
  "mappings": ";;;;;;;;;AAAA;;;ACAA;;;;;;AAgBA,mBAAgC;AAVzB,iBAAiB;AACtB,SAAO;AAAA,IACL,EAAE,KAAK,cAAc,MAAM;AAAA,IAC3B;AAAA,MACE,KAAK;AAAA,MACL,MAAM;AAAA;AAAA;AAAA;AAsFG,gBAAgB;AAC7B,QAAM,EAAE,SAAS,SAAS;AAC1B,QAAM,SAAS,yBAAsB;AACrC,SACE,0DACC,QAAQ,IAAI;AAAA;",
  "names": []
}
